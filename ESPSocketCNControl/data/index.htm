<html>
<meta charset="utf-8" />
<title>CNC</title>
<style>
    button
    {
        border-style: none;
        border-color: inherit;
        border-width: medium;
        background-color: #4CAF50; /* Green */
        color: white;
        padding: 15px 32px;
        text-align: left;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        width: 13px;
    }
    #voltage
    {
        width: 259px;
    }
    #output
    {
        width: 259px;
    }
    body
    {
        background: white;
    }
    .Toolbar
    {
        float: left;
        font-family: 'Trebuchet MS';
        font-size: 14px;
        font-variant: small-caps;
        text-align: center;
        background: #F2F7FE;
        padding: 10px 15px 3px 10px;
        margin-bottom: 1px;
        margin-right: 1px;
        border: 1px solid #7B899B;
    }
    .Toolbar button
    {
        padding: 6px;
        margin: 7px 2px;
        font-variant: normal;
        font-size: 12px;
    }
    .CanvasContainer
    {
        clear: both;
    }
    canvas
    {
        border: 1px solid #7B899B;
    }
    img
    {
        padding: 2px;
        border: 2px solid #F2F7FE;
    }
    img:hover
    {
        border: 2px groove #E4F0FE;
        background: white;
    }
    img.Selected
    {
        border: 2px groove #E4F0FE;
    }
    #savedCopyContainer
    {
        display: none;
    }
    #savedCopyContainer img
    {
        width: 250px;
        height: 150px;
    }
    .style1
    {
        font-size: small;
    }
    #byte_content
    {
        margin: 5px 0;
        max-height: 100px;
        overflow-y: auto;
        overflow-x: hidden;
    }
    #byte_range
    {
        margin-top: 5px;
    }
</style>
<input id="ScaleControl" type="range" min="1" max="10" step="1" value="10" oninput="SetScale(this.value)"
    onchange="SetScale(this.value)">Scale</input>
<div class="CanvasContainer">
    <canvas id="drawingCanvas" width="40" height="40"></canvas>
    <pre id="info">
</pre>
</div>
<input type="button" value="Send" onclick="doSendGcode()" /><input type="file" id="Gfile"
    onchange="previewFile()"><br>
Gcode:<br>
<pre id="Gcode" contenteditable="true"></pre>
<br>
<br>

<script language="javascript" type="text/javascript">
var scale=10,sizeX=40,sizeY=40,light = 128;
var x=0,y=0,on=false;
  var wsUri = "ws://192.168.4.1:81";
  var output;
  var speed;
var curPos = 0;
var canvas;
var context;
var canvasData;
 var preview = document.getElementById('Gcode');
 var info = document.getElementById('info');
var isRun = false;
var lastCmd = null;
var regex = /.*[^\n]/gmi;
var im = document.getElementById('imageTest');


function setProcText(index){
    info.textContent = ""+index+"/"+preview.textContent.length;
}


function GetGmsg(str) {
let m;
if((m = regex.exec(str)) == null) return null;
    if (m.index === regex.lastIndex) 
        regex.lastIndex++;
     setProcText(m.index);
    return m[0];
}


function previewImageFile(){
  var Imagefile    = document.getElementById('ImageFile1').files[0];
  var reader = new FileReader();

        reader.onload = function (e) {
//              console.log(e.target.result);
        img = new Image();
        img.onload=function(){
        //canvas.width=40;
        //canvas.height=40;
        im.src = e.target.result;
        context.drawImage(img,0,0,img.width,img.height,0,0,canvas.width,canvas.height);
        grayScale();
    }
        img.src = e.target.result;

        //context.drawImage(img, 0, 0);

        }

        reader.readAsDataURL(Imagefile);
  
}

function previewFile() {
 
  var file    = document.getElementById('Gfile').files[0];
  var reader  = new FileReader();
  reader.onloadend = function (evt) {
   //console.log(reader.result);
  if (reader.readyState != FileReader.DONE)return;
    preview.textContent = reader.result;;
  }

  if (file) {
    reader.readAsText(file);
  } else {
    preview.textContent = "";
  }
}

function doSendGcode(){
regex = /.*[^\n]/gmi;
isRun = true;
lastCmd = null;
sendNextstr();
}

function SetXY(s){
//l = s.toLowerCase();
//eval(/x(\d+)/gmi.exec('G1 x10 Y12')[1]);
var regX = /x(\d+)/gmi.exec(s);
var regY = /y(\d+)/gmi.exec(s);
if(regX!=null)x = eval(regX[1]);
if(regY!=null)y = eval(regY[1]);
drawPixel (x, y, 255, 0, 255, 255);
updateCanvas();   
}
 
function sendNextstr(){
if(lastCmd != null|| !isRun) return;
t = preview.innerText;
s = GetGmsg(t);
SetXY(s);
lastCmd = s;
if (s==null)isRun = false;
console.log(s);
doSend(s);
lastCmd = null;
}


function right(){
x++;
doSend("G"+(on?"1":"0")+" X"+x);
}

function left(){
x--;
doSend("G"+(on?"1":"0")+" X"+x);
}

function fwd(){
y++;
doSend("G"+(on?"1":"0")+" Y"+y);
}

function back(){
y--;
doSend("G"+(on?"1":"0")+" Y"+y);
}

function home(){
y=0;x=0;on=false;
doSend("G0 X0 Y0");
}

function laserOn(){
on=true;
doSend("D ");
}

function laserOff(){
on=false;
doSend("U ");
}

function GenerateGcode_onclick() {
canvasData = context.getImageData(0, 0, canvas.width, canvas.height);
preview.innerText = GenerateGcode()+"\nG0 X0 Y0";

}

function GenerateGcode(){
var x,y,x1,y1,x2,y2,trace,GcodeString="";

for(y=0;y<=canvas.height;y++){
trace = false; ii = y&1;
    for(x=ii * canvas.width;x!=(!ii)*canvas.width;x+=ii?-1:1){
        if(trace==false){
            if(GetPixelLev(x, y)==0){
                trace = true;
                  GcodeString = ADDGCode(GcodeString,'G0',x,y);
                
            }
        }else{
            if(GetPixelLev(x, y)!=0){
                trace = false;
                GcodeString = ADDGCode(GcodeString,'G1',x,y);
                }

            }


        }
        if(trace==true)GcodeString = ADDGCode(GcodeString,'G1',x,y);
    }
    return GcodeString;
}

function ADDGCode(GcodeString,sym,x,y){
GcodeString = GcodeString + sym + ' X' + x/scale +' Y'+ y/scale+' \n';
return GcodeString;
}

 function grayScale() {
    var imgData = context.getImageData(0, 0, canvas.width, canvas.height);
        var pixels  = imgData.data;
        for (var i = 0, n = pixels.length; i < n; i += 4) {
        var grayscale = pixels[i] * .3 + pixels[i+1] * .59 + pixels[i+2] * .11;
        grayscale =(grayscale>light)?255:0;
        pixels[i  ] = grayscale;        // red
        pixels[i+1] = grayscale;        // green
        pixels[i+2] = grayscale;        // blue
        //pixels[i+3]              is alpha
    }
    context.putImageData(imgData, 0, 0);
  }


function refreshCanvas(){
canvas.width = sizeX * scale;
canvas.height = sizeY * scale;
context = canvas.getContext("2d");
if(im!=null && im.src!='')
        context.drawImage(im,0,0,im.width,im.height,0,0,canvas.width,canvas.height);
grayScale();
canvasData = context.getImageData(0, 0, canvas.width, canvas.height);
}


// That's how you define the value of a pixel //
function drawPixel (x, y, r, g, b, a) {
    var index = (x + y * canvas.width) * 4;

    canvasData.data[index + 0] = r;
    canvasData.data[index + 1] = g;
    canvasData.data[index + 2] = b;
    canvasData.data[index + 3] = a;
}

function GetPixelLev(x, y) {
    var index = (x + y * canvas.width) * 4;
    return canvasData.data[index];
}

// That's how you update the canvas, so that your //
// modification are taken in consideration //
function updateCanvas() {
    context.putImageData(canvasData, 0, 0);
}



  function init()
  {
    output = document.getElementById("output");
    testWebSocket();
  }

  function testWebSocket()
  {
    websocket = new WebSocket(wsUri);
    websocket.onopen = function(evt) { onOpen(evt) };
    websocket.onclose = function(evt) { onClose(evt) };
    websocket.onmessage = function(evt) { onMessage(evt) };
    websocket.onerror = function(evt) { onError(evt) };
  }

  function onOpen(evt)
  {
    output.innerHTML = "CONNECTED";
    if(isRun)sendNextstr();
  }

  function onClose(evt)
  {
     output.innerHTML = "DISCONNECTED";
    testWebSocket();
  }

  function onMessage(evt)
  {
    console.log(evt.data);
    if(isRun)sendNextstr();
  }

  function onError(evt)
  {
    writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
  }

  function doSend(message)
  {
    websocket.send(message);
  }

  function writeToScreen(message)
  {
    var pre = document.createElement("p");
    pre.style.wordWrap = "break-word";
    pre.innerHTML = message;
    output.appendChild(pre);
  }

    function SetScale(s){
        scale = s;
        refreshCanvas();
    }

    function SetLight(l){
    light = l;
    refreshCanvas();
    }


window.onload = function() {
        im = document.getElementById('imageTest');
      canvas = document.getElementById("drawingCanvas");
      sizeX =  canvas.width;
      sizeY = canvas.height;
      scale = document.getElementById("ScaleControl").value;
      refreshCanvas();
     init();
     //updateCanvas();   
   }


</script>

<body>
    <h6 style="height: 2px; width: 262px">
        control</h6>
    <table id="buttons" cellpadding="2" style="width: 259px; height: 169px; background-color: #FFCC99;">
        <tr>
            <td class="style1">
                <input type="button" value="Home" onclick="home()" /><br>
            </td>
            <td>
                <button onclick='fwd()' class="style1">
                    Y+1</button>
            </td>
            <td>
            </td>
        </tr>
        <tr>
            <td>
                <button onmousedown='left()' class="style1">
                    X-1</button>
            </td>
            <td>
                <input type="button" value="On" onclick="laserOn()" />
            </td>
            <td>
                <button onmousedown='right()' class="style1">
                    X+1</button>
            </td>
        </tr>
        <tr>
            <td class="style1">
                &nbsp;
            </td>
            <td>
                <button onclick='back()' class="style1">
                    Y-1</button>
            </td>
            <td class="style1">
                <input type="button" value="Off" onclick="laserOff()" />
            </td>
        </tr>
    </table>
    <input type="file" id="ImageFile1" onchange="previewImageFile()"><br>
    <input id="Generate" type="button" value="Generate G-Code" 
    onclick="GenerateGcode_onclick()" /><br>
    <input id="Light" type="range" min="0" max="255" step="1" oninput="SetLight(this.value)"
        onchange="SetLight(this.value)">Light</input>
    <div id="voltage">
    </div>
    <div id="output">
    </div>
    <p>
        <img id="imageTest" alt="" src="" /></p>
</body>
</html>
